"""
Задача:
В первую очередь скачайте исходный код, который нужно обложить тестами с GitHub. (Можно скопировать)
В этом коде сможете обнаружить дополненный с предыдущей задачи класс Runner
и новый класс Tournament.
Изменения в классе Runner:
Появился атрибут speed для определения скорости бегуна.
Метод __eq__ для сравнивания имён бегунов.
Переопределены методы run и walk, теперь изменение дистанции зависит от скорости.
Класс Tournament представляет собой класс соревнований, где есть дистанция, которую нужно пробежать
и список участников. Также присутствует метод start, который реализует логику бега по предложенной дистанции.

Напишите класс TournamentTest, наследованный от TestCase. В нём реализуйте следующие методы:

setUpClass - метод, где создаётся атрибут класса all_results. Это словарь в который будут сохраняться
результаты всех тестов.
setUp - метод, где создаются 3 объекта:
Бегун по имени Усэйн, со скоростью 10.
Бегун по имени Андрей, со скоростью 9.
Бегун по имени Ник, со скоростью 3.
tearDownClass - метод, где выводятся all_results по очереди в столбец.

Так же методы тестирования забегов, в которых создаётся объект Tournament на дистанцию 90.
У объекта класса Tournament запускается метод start, который возвращает словарь в переменную all_results.
В конце вызывается метод assertTrue, в котором сравниваются
последний объект из all_results (брать по наибольшему ключу) и предполагаемое имя последнего бегуна.
Напишите 3 таких метода, где в забегах участвуют (порядок передачи в объект Tournament соблюсти):
Усэйн и Ник
Андрей и Ник
Усэйн, Андрей и Ник.
Как можно понять: Ник всегда должен быть последним.

Дополнительно (не обязательно, не влияет на зачёт):
В данной задаче, а именно в методе start класса Tournament, допущена логическая ошибка.
В результате его работы бегун с меньшей скоростью может пробежать некоторые дистанции быстрее,
чем бегун с большей.
Попробуйте решить эту проблему и обложить дополнительными тестами.
"""

import unittest
import runner


class TournamentTest(unittest.TestCase):
    """Дочерний тестовый класс, наследуемый от unittest.TestCase"""

    @classmethod
    def setUpClass(cls):
        """Метод класса вызывается один раз перед началом всех тестов.
        Данный метод создает атрибут класса словарь, в который будут сохраняться результаты всех тестов"""
        cls.all_results = {}    # словарь в который будут сохраняться результаты всех тестов.

    def setUp(self):
        """Метод вызывается перед вызовом каждого тестового метода.
        Данный метод создает три переменных, обозначающих бегунов,
        и из этих участников формирует списки для участия в каждом турнире"""
        self.lst_runner = []
        self.runner_Usain = runner.Runner('Усэйн', 10)      # бегун 1
        self.runner_Andrey = runner.Runner('Андрей', 9)     # бегун 2
        self.runner_Nik = runner.Runner('Ник', 3)           # бегун 3

        # список забегов с указанием участников забега. Всего 4 забега
        self.lst_runner.append([self.runner_Usain, self.runner_Nik])
        self.lst_runner.append([self.runner_Andrey, self.runner_Nik])
        self.lst_runner.append([self.runner_Usain, self.runner_Andrey, self.runner_Nik])
        self.lst_runner.append([self.runner_Usain, self.runner_Andrey, self.runner_Nik])


    @classmethod
    def tearDownClass(cls):
        """Метод класса вызывается после завершения отработки всех тестовых методов.
        Данный метод выводит в консоль результаты забега участников турнира"""

        for test_key, test_value in cls.all_results.items(): # для каждой пары ключ: значение
            print(f'Тест: {test_key}')      # выводим в консоль название теста
            for key, value in test_value.items():
                print(f'\t{key}: {value.name}')     # выводим в консоль результаты забега


    def test_turn(self):
        """Метод тестирования, в котором в цикле выполняет тестирование класса Tournament.
        Количество повторений определяется длиной списка self.lst_runner.
        Для последнего забега дистанция изменена."""
        number = len(self.lst_runner)   # количество тестов определяется длиной списка забегов
        for i in range(number):     # основной цикл для выполнения тестов
            distance = 90           # определим дистанцию
            if i == number - 1:     # для последнего теста дистанция уменьшена
                distance = 6
            runners = self.lst_runner[i]    # список участников забега
            turn = runner.Tournament(distance, *runners)    # создаем объект забега
            result = turn.start()   # получаем результаты забега
            self.all_results[f'test_turn_{str(i+1)}'] = result  # сохраняем результаты забега в словаре

            # тестируем полученные результаты забега
            self.assertTrue(result[list(result.keys())[-1]] == 'Ник', 'Ошибка! Последним должен быть Ник')
            for item in runners:    # в цикле для всех участников обнулим дистанцию,
                                    # что бы она не влияла на следующее тестирование
                item.distance = 0


if __name__ == '__main__':
    unittest.main()     # вызываем основной метод тестированя результатов
                        # в результате тестирования видим,что тест номер 4 завершился ошибкой